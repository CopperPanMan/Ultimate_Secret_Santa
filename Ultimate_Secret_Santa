import random
from itertools import permutations
import copy
import openpyxl
from datetime import datetime
from email.message import EmailMessage
import ssl
import smtplib


############### ULTIMATE SECRET SANTA, PYTHON EDITION ################
# This Program takes the maximum number of gifts someone wants to give (and get) in multiple rounds of Secret Santa, and finds a gift distribution that works without assigning anyone the same person twice.

# Instructions to Run:
    # RE-GENERATE AN APP PASSWORD FOR YOUR GOOGLE ACCOUNT and add below at the line with a link (near line 68). DELETE IT AFTER FOR SECURITY
    # Fill in the participant arrays with their choices in each round (add/subtract anyone needed)
    # dry run it by setting "sendEmailsToTesterEmail" and "printPairingsinTerminal" to "ON". It will send all output emails to the test email. You can optionally run it first with emailResults set to "OFF"
    # reset the send variables for final run and send the final pairings
    # a to do list is located at the bottom if you want to improve the code.



# Round 1 Choices        -  christmasList Order is ['email body', email, [veto list], person, gifts_received, desired_gifts_given, [their generated asignees]]
christmasListOriginal = [['Vixen','Comet'],'', 'email@gmail.com' ,[], 'Frosty', 0, 1, [], 
                         #[],'', 'email@gmail.com' ,['Frosty'], 'Buddy', 0, 0, [],
                         ['Frosty'],'', 'email@gmail.com' ,['Blitzen'], 'Rudolf', 0, 1, [],
                         [''],'', 'email@gmail.com' ,['Rudolf'], 'Blitzen', 0, 1, [],
                         ['Buddy'],'', 'email@gmail.com' ,['Santa'], 'Comet', 0, 1, [],
                         ['Frosty','Vixen'],'', 'email@gmail.com' ,['Comet'], 'Santa', 0, 1, [],
                         ['Santa'],'', 'email@gmail.com' ,[], 'Vixen', 0, 1, []]


# Round 2 Choices
christmasDayChoices = ['Frosty', 1, #I programmed this in 2022 ORDER DEPENDANT. you must put the names in the order they appear in the first array. -> in future, it can use names or something like that. Not sure improvements.
                       #'Buddy', 0, 
                       'Rudolf', 0, 
                       'Blitzen', 0, 
                       'Comet', 3, 
                       'Santa', 3, 
                       'Vixen', 3]

# Other settings
sendEmailsToTesterEmail = "OFF" # ON or OFF //I verified this does ACTUALLY work on 11/4/24. The first line of the terminal output proves this. Stop being anxious.
emailResults = "ON" # ON or OFF. 
printPairingsinTerminal = "OFF" # ON or OFF // For final run, I recommend turning this "OFF" so you don't ruin your own christmas.

testerEmail = 'email1@gmail.com'
excelOutput = "OFF" # ON or OFF
path = "PASTE FILEPATH HERE"
email_password = 'PASTE PASSWORD HERE' # how to generate an app password: https://support.google.com/accounts/answer/185833?hl=en delete this after for security.
email_sender = 'email1@gmail.com'

listLen = 8;
pastProb = .3 # past pairing rejection probability









# FUNCTIONS
def Add_Past_Assignees_To_Vetos(christmasList):
    print("\n--- Adding Past Assignees to Veto Lists ---\n")
    num_participants = len(christmasList) // 8  # Each participant has 8 elements in the list
    for i in range(num_participants):
        index = i * 8  # Calculate the starting index for this participant
        past_assignees = christmasList[index]
        veto_list = christmasList[index + 3]
        name = christmasList[index + 4]
        new_vetos = []
        for assignee in past_assignees:
            if assignee not in veto_list:
                roll = random.random()
                if roll < pastProb:
                    veto_list.append(assignee)
                    new_vetos.append(assignee)
        if (new_vetos and printPairingsinTerminal == "OFF"):
            print(f"Added to {name}'s veto list: {new_vetos}")
    print("\n--- Finished Adding Past Assignees ---\n")

def Clear_Sheet(path):
    print('\n----- clearing excel sheet -----\n')
    myWB = openpyxl.load_workbook(path) # won't work if excel is open
    for x in range(len(myWB.sheetnames)-1):
        #print('trying to clear',myWB.sheetnames[1])
        del myWB[myWB.sheetnames[1]]
    myWB.save(path)


def Write_Timestamp_Message_to_Email_Body(christmasList):
    for x in range(int(len(christmasList)/listLen)):
        christmasList[(x+1)*listLen-7] = christmasList[(x+1)*listLen-7] + "\r\nMerry Christmas!\r\n\r\n" + "\r\n" + Generate_Timestamp_Message() + "\r\n--- This email is computer-generated ---"
    return christmasList


def Update_Email_Body(christmasList, name):
    for x in range(int(len(christmasList)/listLen)): # iterate for every person in the list
        if christmasList[(x+1)*listLen-7] == "":
            christmasList[(x+1)*listLen-7] = "Hello " + christmasList[(x+1)*listLen-4] +"! \r\n\r\n You'll secretly buy for these people on " + name + ':\r\n'
            if len(christmasList[(x+1)*listLen-1]) > 0:
                for i in range(len(christmasList[(x+1)*listLen-1])):
                    christmasList[(x+1)*listLen-7] = christmasList[(x+1)*listLen-7] + " • " + christmasList[(x+1)*listLen-1][i] + "\r\n"
            else:
                christmasList[(x+1)*listLen-7] = christmasList[(x+1)*listLen-7] + " • Nobody\r\n"
        elif len(christmasList[(x+1)*listLen-1]) > 0:
            #print (christmasList[(x+1)*listLen-7])
            christmasList[(x+1)*listLen-7] = christmasList[(x+1)*listLen-7] + "\r\n...And you'll secretly buy for these people on " + name + ':\r\n'
            for i in range(len(christmasList[(x+1)*listLen-1])):
                christmasList[(x+1)*listLen-7] = christmasList[(x+1)*listLen-7] + " • " + christmasList[(x+1)*listLen-1][i] + "\r\n"
    return christmasList



def Send_Email_Results(christmasList):
    print("\n\n")
    for x in range(int(len(christmasList)/listLen)):
        if christmasList[(x+1)*listLen-6] != "":
            email_receiver = christmasList[(x+1)*listLen-6]

            subject = christmasList[(x+1)*listLen-4] + "'s Secret Santa " + str(datetime.today().strftime('%Y')) + " Assignees"
            body = christmasList[(x+1)*listLen-7]

            em = EmailMessage()
            em['from'] = email_sender
            em['to'] = email_receiver
            em['subject'] = subject
            em.set_content(body)

            context = ssl.create_default_context()

            with smtplib.SMTP_SSL('smtp.gmail.com', 465, context = context) as smtp:
                smtp.login(email_sender, email_password)
                smtp.sendmail(email_sender, email_receiver, em.as_string())
            print('sent ' + christmasList[(x+1)*listLen-4] + "'s Pairings to " + email_receiver)
    print("\n\nAll emails have been sent!\n\n")
    return


def Generate_Timestamp_Message():
    return "These pairings were calculated randomly via Python (without human input) at " + str(datetime.today().strftime('%Y-%m-%d %H:%M:%S')) + ". Nobody knows this information but you!"


def Write_Timestamp_Message_to_Excel(path):
    
    print('\n----- writing final excel message -----\n')
    myWB = openpyxl.load_workbook(path) # won't work if excel is open
    for x in range(len(myWB.sheetnames)-1):
        
        # Increment to the last row with data
        currSheet = myWB[myWB.sheetnames[x+1]]
        blank, count = 0, 0
        while blank == 0:
            if currSheet['A'+str(count+1)].value == None and currSheet['A'+str(count+2)].value == None:
                blank = 1
            count += 1

        #print("I should be writing to excel now on sheet",myWB.sheetnames[x+1],"at row", count+1)
        currSheet['A' + str(count+1)] = Generate_Timestamp_Message()

    myWB.save(path)


def Write_Pairings_to_Excel(christmasList, path, name):
    print('\n----- Writing Pairings to Excel -----\n')
    myWB = openpyxl.load_workbook(path) # won't work if excel is open

    # Create A Sheet for Everybody's name (if it isn't there already)
    for x in range(int(len(christmasList)/listLen)): # for every person
        alreadyHasSheet = 0
        for y in range(len(myWB.sheetnames)): # check their name against every sheet

            if myWB.sheetnames[y] == christmasList[(x+1)*listLen-4]: #if the name matches
                #print('wewe', christmasList[(x+1)*listLen-4])
                alreadyHasSheet = 1
                currSheet = myWB[myWB.sheetnames[y]]

                blank, count = 0, 0
                while blank == 0:
                    
                    if currSheet['A'+str(count+1)].value == None and currSheet['A'+str(count+2)].value == None:
                        blank = 1
                    count += 1
                
                if len(christmasList[(x+1)*listLen-1]) > 0:
                    currSheet['A' + str(count+1)] = "... And you'll secretly buy for these people on " + name + ':'
                
                    for i in range(len(christmasList[(x+1)*listLen-1])):
                        currSheet['A' + str(count+i+2)] = " • " + christmasList[(x+1)*listLen-1][i]

        if alreadyHasSheet == 0:
            myWB.create_sheet(str(christmasList[(x+1)*listLen-4]))
            # write their pairings
            #print('wowo', christmasList[(x+1)*listLen-4])
            currSheet = myWB[myWB.sheetnames[len(myWB.sheetnames)-1]]
            currSheet['A1'] = "Hello " + christmasList[(x+1)*listLen-4] +"! You'll secretly buy for these people on " + name + ':'
            currSheet['A2'] = " • Nobody"
            for i in range(len(christmasList[(x+1)*listLen-1])):
                currSheet['A' + str(i+2)] = " • " + christmasList[(x+1)*listLen-1][i]

    myWB.save(path)


def Generate_Assignees(christmasList, name):
    tempChristmasList = copy.deepcopy(christmasList)
    Q = list(range(int(len(tempChristmasList)/listLen))) # make up a random order to try the pairings in
    S = list(range(int(len(tempChristmasList)/listLen)))

    random.seed()
    
    reducedCount, count, innerCount, done = 0,0,0,0


    while done == 0:
        while innerCount < 20000:
            innerCount += 1
            count += 1
            #print('now on iteration: ', count)
            random.shuffle(Q)
            
            ## Iterate through every person ##
            for x in Q:
                gifts_given = 0

                random.shuffle(S)
                ## for the current person (the one drawing names (ODN)), iterate through all others again (in random order) and assign them if it makes sense
                for y in S:

                    veto = 0

                    # if statements to: check if ODN still needs to draw, that the name they Comet isn't their own, and the person they Comet still has room to be given gifts
                    if gifts_given < tempChristmasList[(Q[x]+1)*listLen-2] and tempChristmasList[(S[y]+1)*listLen-4] != tempChristmasList[(Q[x]+1)*listLen-4]: 
                        if tempChristmasList[(S[y]+1)*listLen-3] < tempChristmasList[(S[y]+1)*listLen-2]:
                            #print('tempChristmasList[Q[x]]',tempChristmasList[Q[x]],'tempChristmasList[Q[x]]',tempChristmasList[S[y]])
                            # iterate the veto list to make sure the current assignee ("drawn name") isn't on it
                            for m in range(len(tempChristmasList[(Q[x]+1)*listLen-5])):

                                if tempChristmasList[(S[y]+1)*listLen-4] == tempChristmasList[(Q[x]+1)*listLen-5][m]:
                                    veto = 1
                                    #print('---- stopping assignment of', tempChristmasList[(x+1)*listLen-5][m], 'to ', tempChristmasList[(x+1)*listLen-4], 'because of a veto ----')

                            if veto == 0:

                                ## append the new assignee to the person whose turn it is
                                # DEBUGGING print('assigning', tempChristmasList[(S[x][y]+1)*listLen-4], 'to', tempChristmasList[(x+1)*listLen-4] )
                                tempChristmasList[(Q[x]+1)*listLen-1].append(tempChristmasList[(S[y]+1)*listLen-4])                                                                                                                
                                tempChristmasList[(S[y]+1)*listLen-3] += 1 #add 1 to gift_given of the assignee
                                gifts_given += 1

                done = 1
                for t in Q:
                    if tempChristmasList[(S[t]+1)*listLen-2] != tempChristmasList[(S[t]+1)*listLen-3]: #if the gifts_received != desired_gifts_given, we're not done
                        done = 0
        
            if done == 1:
                print('\n')
                print('SOLUTION FOUND ON ITERATION', count, '!!')
                tempChristmasList = Update_Email_Body(tempChristmasList, name)
                return (tempChristmasList)
                break
            else:
                del tempChristmasList
                tempChristmasList = copy.deepcopy(christmasList)
                #print ('\n', 'No Result Found. Resetting for iteration:', count+1, '\n')
    
        if done == 1:
            break

        #randomly drop a desired gift from the topmost person, and try again
        topRounds, topRoundsPos = 0,0

        for p in Q:
            if tempChristmasList[(p+1)*listLen-2] > topRounds: #if this person is > than the current top giver
                topRounds = tempChristmasList[(p+1)*listLen-2] # the top given number is now them
                topRoundsPos = p #save the position of this giver
            elif tempChristmasList[(p+1)*listLen-2] == topRounds and random.random() < .5: # if two people's desired_gifts_given is equal, randomly pick one to drop
                topRoundsPos = p

        reducedCount += 1
        innerCount = 0
        christmasList[(topRoundsPos+1)*listLen-2] -= 1 #reduce desired gifts given from top giver
        del tempChristmasList
        tempChristmasList = copy.deepcopy(christmasList)
        print('\n')
        print(tempChristmasList[(topRoundsPos+1)*listLen-4], "'s gift_given has been reduced from", topRounds, 'to', tempChristmasList[(topRoundsPos+1)*listLen-2], '\nSTARTING ROUND', reducedCount, '!\n')

        christmasList = Update_Email_Body(christmasList)


def TurnAssigneesToVetos(christmasList):

    print('\n\nTURNING ROUND ONE ASSIGNEES INTO ROUND TWO VETOS \n\n')
    #print('before: ', christmasList)
    for x in range(int(len(christmasList)/listLen)):
        for y in range(len(christmasList[(x+1)*listLen-1])): #iterate as many times as there are assignees # this is the length of the asignee field
            christmasList[(x+1)*listLen-5].append(christmasList[(x+1)*listLen-1][y]) # append asignee at y to veto list

        # do it again but this time to remove clear out the asignees
        for z in range(len(christmasList[(x+1)*listLen-1])):
            christmasList[(x+1)*listLen-1].pop() # remove 

    #print('after: ', christmasList)
    return(christmasList)


def PrintPairings(christmasList, round):
    if printPairingsinTerminal == "ON":
        print('\nRound '+ str(round) + ' PAIRINGS: \n')
        for p in range(int(len((christmasList))/listLen)):
            print(christmasList[(p+1)*listLen-4],': ', christmasList[(p+1)*listLen-1])
        print('\n\n')

def ClearVetos(christmasList, name):
    for i in range(int(len(christmasList)/listLen)):
        if christmasList[(i+1)*listLen-4] == name:
            christmasList[(i+1)*listLen-5].clear()

def Change_Emails_To_Tester(christmasList, testerEmail, ):
    for p in range(int(len((christmasList))/listLen)):
        christmasList[(p+1)*listLen-6] = testerEmail
        #print(christmasList[(p+1)*listLen-6])

###########################
### MAIN CODE RUNS HERE ###
###########################


## Generate Secret Santa Round 1 Pairings ##
if sendEmailsToTesterEmail != "OFF":
    Change_Emails_To_Tester(christmasListOriginal, testerEmail)
    print("\nChanged all recipient email addresses to:     " + testerEmail + "\n")

Add_Past_Assignees_To_Vetos(christmasListOriginal)
round1List = Generate_Assignees(christmasListOriginal, "Christmas Eve")
PrintPairings(round1List,1)


if excelOutput == "ON":
    Clear_Sheet(path)
    Write_Pairings_to_Excel(round1List, path, "Christmas Eve")


## Generate Secret Santa Round 2 Pairings ##
for i in range(int(len((round1List))/listLen)):
    round1List[(i+1)*listLen-2] = christmasDayChoices[(i+1)*2-1] # overwrite with their new choices
    round1List[(i+1)*listLen-3] = 0 # reset gifts received to 0

ClearVetos(round1List, 'Frosty') #clear Frosty's veto list for round 2
round2List = (TurnAssigneesToVetos(round1List))

#print ('beginning round 2 with: ', round2List) # DEBUGGING
round2List = (Generate_Assignees(round2List, "North Pole Christmas Day"))
PrintPairings(round2List,2)

if excelOutput == "ON":
    Write_Pairings_to_Excel(round2List, path, "North Pole Christmas Day")
    Write_Timestamp_Message_to_Excel(path)

round2List = Write_Timestamp_Message_to_Email_Body(round2List)

if emailResults == "ON":
    Send_Email_Results(round2List)



# To Do (in decreasing order of importance)
    # add new feature: a global variable that determines how likely it is that somebody you got last year will end up on your veto list (to make it less likely to get people you got last year). I think last year's pairings would have to be a new entry per person in the christmaslist original list, after This is optional, should work for any amount of last year's pairings.
    # make round preferences (for round 1-> infinity) be stored simply as an array inside the "round 1" christmasListOriginal. This would require rewriting to make X number of rounds run based on how many X entries are there. This would make adding further rounds much easier, though, and make input less error prone. It would necessitate a variable (list maybe?) that stores the names of each round, for email sake.
    # change this all to use dictionaries or at least clean it up so the code is more readable


# To Do (one day)
    # make the code optionally read its data values in from excel to simplify data input here and reduce the risk or errors. This requires a LOT of changes, including data input validation. on second thought, I can just add validate the sheet manually.
    # you could make the output only show the rounds they are participating in, so Buddy doesn't get a "nobody" email
    # TO DO (if it were to be turned into real software)
    #  - THIS DOES NOT HAVE PROTECTIONS AGAINST SOMEONE VETOING EVERYBODY
    #  - it would probably need a GUI, or to run in a browser, or in google apps scripts.
    #  - THERE ARE NO PROTECTIONS AGAINST NON-POSITIVE INTEGER INPUTS OR NUMBERS HIGHER THAN QTY OF PPL
    #  - basically it's not built as a comprehensive data validated GUI, just a code file

# Completed Already
    # DONE Move the things that change each christmas to the top in it's own block DONE
    # DONE Add a variable called "test mode", that if turned on, changes everyone's emails to my email before the code runs so only I get all the emails.
    # DONE Add a variable that turns on or off excel sheet output, and change the excel output to a whole new backup document. It's not needed most years.
    # DONE improve the instructions
    # Note from myself 11/3/2023: the code both sends emails AND writes to new excel tabs. As I recall, the 'writing to excel' bit doesn't work right if other people are viewing the sheet because this doesn't use the Excel API but rather a local filepath. Since there is always the sent email folder, writing to excel is a little unnecessary anyway.
