import random
import numpy
from itertools import permutations
import copy

############### ULTIMATE SECRET SANTA, PYTHON EDITION ################
# This Program takes the maximum number of gifts someone wants to give (and get) in Secret Santa, and finds a distribution that works without assigning anyone the same person twice.

def Generate_Assignees(christmasList):
    tempChristmasList = copy.deepcopy(christmasList)

    ## Randomly shuffle all possible permutations of tempChristmasList ##
    Q = list(range(int(len(tempChristmasList)/5)))
    random.shuffle(Q)
    S = list(permutations(Q, int(len(tempChristmasList)/5)))

    random.seed()
    reducedCount, count, done = 0,0,0

    
    while done == 0:
        for i in S:
            count += 1

            ## Iterate through every person ##
            for x in i:
                gifts_given = 0

                ## for the current person (the one drawing names (ODN)), iterate through all others again (in random order) and assign them if it makes sense
                for y in i:

                    veto = 0

                    # if statements to: check if ODN still needs to draw, that the name they drew isn't their own, and the person they drew still has room to be given gifts
                    if gifts_given < tempChristmasList[(x+1)*5-2] and tempChristmasList[(S[x][y]+1)*5-4] != tempChristmasList[(x+1)*5-4]: 
                        if tempChristmasList[(S[x][y]+1)*5-3] < tempChristmasList[(S[x][y]+1)*5-2]:

                            # iterate the veto list to make sure the current assignee ("drawn name") isn't on it
                            for m in range(len(tempChristmasList[(x+1)*5-5])):

                                if tempChristmasList[(S[x][y]+1)*5-4] == tempChristmasList[(x+1)*5-5][m]:
                                    veto = 1
                                    #print('---- stopping assignment of', tempChristmasList[(x+1)*5-5][m], 'to ', tempChristmasList[(x+1)*5-4], 'because of a veto ----')

                            if veto == 0:

                                ## append the new assignee to the person whose turn it is
                                # DEBUGGING print('assigning', tempChristmasList[(S[x][y]+1)*5-4], 'to', tempChristmasList[(x+1)*5-4] )
                                tempChristmasList[(x+1)*5-1].append(tempChristmasList[(S[x][y]+1)*5-4])                                                                                                                
                                tempChristmasList[(S[x][y]+1)*5-3] += 1 #add 1 to gift_given of the assignee
                                gifts_given += 1

                done = 1
                for t in i:
                    if tempChristmasList[(S[x][t]+1)*5-2] != tempChristmasList[(S[x][t]+1)*5-3]: #if the gifts_received != desired_gifts_given, we're not done
                        done = 0
        
            if done == 1:
                print('\n')
                print('SOLUTION FOUND ON ITERATION', count, '!!')
                return (tempChristmasList)
                break
            else:
                del tempChristmasList
                tempChristmasList = copy.deepcopy(christmasList)
                #print ('\n', 'No Result Found. Resetting for iteration:', count+1, '\n')
    
        if done == 1:
            break

        #randomly drop a desired gift from the topmost person, and try again
        topRounds, topRoundsPos = 0,0

        for p in Q:
            if tempChristmasList[(p+1)*5-2] > topRounds: #if this person is > than the current top giver
                topRounds = tempChristmasList[(p+1)*5-2] # the top given number is now them
                topRoundsPos = p #save the position of this giver
            elif tempChristmasList[(p+1)*5-2] == topRounds and random.random() < .5: # if two people's desired_gifts_given is equal, randomly pick one to drop
                topRoundsPos = p

        reducedCount += 1
        christmasList[(topRoundsPos+1)*5-2] -= 1 #reduce desired gifts given from top giver
        del tempChristmasList
        tempChristmasList = copy.deepcopy(christmasList)
        print('\n')
        print(tempChristmasList[(topRoundsPos+1)*5-4], "'s gift_given has been reduced from", topRounds, 'to', tempChristmasList[(topRoundsPos+1)*5-2], '\nSTARTING ROUND', reducedCount, '!\n')

def TurnAssigneesToVetos(christmasList):

    print('\n\nTURNING ROUND ONE ASSIGNEES INTO ROUND TWO VETOS \n\n')
    #print('before: ', christmasList)
    for x in range(int(len(christmasList)/5)):
        for y in range(len(christmasList[(x+1)*5-1])): #iterate as many times as there are assignees # this is the length of the asignee field
            christmasList[(x+1)*5-5].append(christmasList[(x+1)*5-1][y]) # append asignee at y to veto list

        # do it again but this time to remove clear out the asignees
        for z in range(len(christmasList[(x+1)*5-1])):
            christmasList[(x+1)*5-1].pop() # remove 

    #print('after: ', christmasList)
    return(christmasList)

def PrintPairings(christmasList):
    for p in range(int(len((christmasList))/5)):
        print(christmasList[(p+1)*5-4],': ', christmasList[(p+1)*5-1])
    print('\n\n')

###########################
#### Code is Executed #####
###########################



# Round 1 Choices        -  christmasList Order is [[veto list], person, gifts_received, desired_gifts_given, [their generated asignees]]
christmasListOriginal = [[], 'Frosty', 0, 1, [], 
                         ['Jack_Skellington'], 'Mrs_Claus', 0, 2, [], 
                         ['Frosty', 'Rudolf'], 'Grinch', 0, 1, [], 
                         ['Mrs_Claus', 'Grinch'], 'Jack_Skellington', 0, 1, [], 
                         ['Jack_Skellington'], 'Rudolf', 0, 1, [], 
                         ['Mrs_Claus'], 'Buddy_Elf', 0, 1, [],
                         [], 'Hans', 0, 1, []]


## Generate Round 1 Pairings ##
round1List = Generate_Assignees(christmasListOriginal)
print('Round 1 PAIRINGS: \n', PrintPairings(round1List))


# Round 2 Choices
christmasDayChoices = ['Frosty', 4, 'Mrs_Claus', 4, 'Grinch', 4, 'Jack_Skellington', 3, 'Rudolf', 3, 'Buddy_Elf', 2, 'Hans', 3,]



## Generate Round 2 Pairings ##
for i in range(int(len((round1List))/5)):
    round1List[(i+1)*5-2] = christmasDayChoices[(i+1)*2-1] # overwrite with their new choices
    round1List[(i+1)*5-3] = 0 # reset gifts received to 0

round2List = (TurnAssigneesToVetos(round1List))
print ('beginning round 2 with: ', round2List)
round2List = (Generate_Assignees(round2List))
#print('ending round 2 with:', round2List )
print('Round 2 PAIRINGS: \n', PrintPairings(round2List))
