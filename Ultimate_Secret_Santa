import random
from itertools import permutations
import copy
import openpyxl
from datetime import datetime
from email.message import EmailMessage
import ssl
import smtplib


############### ULTIMATE SECRET SANTA ################
# This Program takes the maximum number of gifts someone wants to give (and get) in Secret Santa, and finds a distribution that works without assigning anyone the same person twice.
# It allows for vetos (to not get a particular person or multiple)
# It emails the results and/or writes them to an excel file
# It can support multiple rounds (where a person's assignees for round 1 become their vetos for round 2) for when gifts are given over multiple days.


# TO DO
#  - This optimally would take input from an excel sheet or GUI instead of this raw text file
#  - It lacks data validation


path = "C:\\Users\\person\\example.xlsx"


def Clear_Sheet(path):
    print('\n----- clearing excel sheet -----\n')
    myWB = openpyxl.load_workbook(path) # won't work if excel is open
    for x in range(len(myWB.sheetnames)-1):
        #print('trying to clear',myWB.sheetnames[1])
        del myWB[myWB.sheetnames[1]]
    myWB.save(path)


def Write_Timestamp_Message_to_Email_Body(christmasList):
    for x in range(int(len(christmasList)/7)):
        christmasList[(x+1)*7-7] = christmasList[(x+1)*7-7] + "\r\n" + Generate_Timestamp_Message() + "\r\n--- This email is computer-generated ---"
    return christmasList


def Update_Email_Body(christmasList, name):
    for x in range(int(len(christmasList)/7)):
        if christmasList[(x+1)*7-7] == "":
            christmasList[(x+1)*7-7] = "Hello " + christmasList[(x+1)*7-4] +"! \r\n\r\n You'll secretly buy for these people on " + name + ':\r\n'
            if len(christmasList[(x+1)*7-1]) > 0:
                for i in range(len(christmasList[(x+1)*7-1])):
                    christmasList[(x+1)*7-7] = christmasList[(x+1)*7-7] + " • " + christmasList[(x+1)*7-1][i] + "\r\n"
            else:
                christmasList[(x+1)*7-7] = christmasList[(x+1)*7-7] + " • Nobody\r\n"
        elif len(christmasList[(x+1)*7-1]) > 0:
            christmasList[(x+1)*7-7] = christmasList[(x+1)*7-7] + "\r\n...And you'll secretly buy for these people on " + name + ':\r\n'
            for i in range(len(christmasList[(x+1)*7-1])):
                christmasList[(x+1)*7-7] = christmasList[(x+1)*7-7] + " • " + christmasList[(x+1)*7-1][i] + "\r\n"
    return christmasList



def Send_Email_Results(christmasList):

    email_sender = 'michaelndickson@gmail.com'
    email_password = 'PUT PASSWORD HERE'

    for x in range(int(len(christmasList)/7)):
        if christmasList[(x+1)*7-6] != "":
            email_receiver = christmasList[(x+1)*7-6]

            subject = christmasList[(x+1)*7-4] + "'s Secret Santa 2022 Assignees"
            body = christmasList[(x+1)*7-7]

            em = EmailMessage()
            em['from'] = email_sender
            em['to'] = email_receiver
            em['subject'] = subject
            em.set_content(body)

            context = ssl.create_default_context()

            with smtplib.SMTP_SSL('smtp.gmail.com', 465, context = context) as smtp:
                smtp.login(email_sender, email_password)
                smtp.sendmail(email_sender, email_receiver, em.as_string())
    return


def Generate_Timestamp_Message():
    return "These pairings were calculated randomly via Python (without human input) at " + str(datetime.today().strftime('%Y-%m-%d %H:%M:%S')) + ". Nobody knows this information but you!"


def Write_Timestamp_Message_to_Excel(path):
    
    print('\n----- writing final excel message -----\n')
    myWB = openpyxl.load_workbook(path) # won't work if excel is open
    for x in range(len(myWB.sheetnames)-1):
        
        # Increment to the last row with data
        currSheet = myWB[myWB.sheetnames[x+1]]
        blank, count = 0, 0
        while blank == 0:
            if currSheet['A'+str(count+1)].value == None and currSheet['A'+str(count+2)].value == None:
                blank = 1
            count += 1

        #print("I should be writing to excel now on sheet",myWB.sheetnames[x+1],"at row", count+1)
        currSheet['A' + str(count+1)] = Generate_Timestamp_Message()

    myWB.save(path)


def Write_Pairings_to_Excel(christmasList, path, name):
    print('\n----- Writing Pairings to Excel -----\n')
    myWB = openpyxl.load_workbook(path) # won't work if excel is open

    # Create A Sheet for Everybody's name (if it isn't there already)
    for x in range(int(len(christmasList)/7)): # for every person
        alreadyHasSheet = 0
        for y in range(len(myWB.sheetnames)): # check their name against every sheet

            if myWB.sheetnames[y] == christmasList[(x+1)*7-4]: #if the name matches
                #print('wewe', christmasList[(x+1)*7-4])
                alreadyHasSheet = 1
                currSheet = myWB[myWB.sheetnames[y]]

                blank, count = 0, 0
                while blank == 0:
                    
                    if currSheet['A'+str(count+1)].value == None and currSheet['A'+str(count+2)].value == None:
                        blank = 1
                    count += 1
                
                if len(christmasList[(x+1)*7-1]) > 0:
                    currSheet['A' + str(count+1)] = "... And you'll secretly buy for these people on " + name + ':'
                
                    for i in range(len(christmasList[(x+1)*7-1])):
                        currSheet['A' + str(count+i+2)] = " • " + christmasList[(x+1)*7-1][i]

        if alreadyHasSheet == 0:
            myWB.create_sheet(str(christmasList[(x+1)*7-4]))
            # write their pairings
            #print('wowo', christmasList[(x+1)*7-4])
            currSheet = myWB[myWB.sheetnames[len(myWB.sheetnames)-1]]
            currSheet['A1'] = "Hello " + christmasList[(x+1)*7-4] +"! You'll secretly buy for these people on " + name + ':'
            currSheet['A2'] = " • Nobody"
            for i in range(len(christmasList[(x+1)*7-1])):
                currSheet['A' + str(i+2)] = " • " + christmasList[(x+1)*7-1][i]

    myWB.save(path)


def Generate_Assignees(christmasList, name):
    tempChristmasList = copy.deepcopy(christmasList)
    Q = list(range(int(len(tempChristmasList)/7))) # make up a random order to try the pairings in
    S = list(range(int(len(tempChristmasList)/7)))

    random.seed()
    
    reducedCount, count, innerCount, done = 0,0,0,0


    while done == 0:
        while innerCount < 20000:
            innerCount += 1
            count += 1
            #print('now on iteration: ', count)
            random.shuffle(Q)
            
            ## Iterate through every person ##
            for x in Q:
                gifts_given = 0

                random.shuffle(S)
                ## for the current person (the one drawing names (ODN)), iterate through all others again (in random order) and assign them if it makes sense
                for y in S:

                    veto = 0

                    # if statements to: check if ODN still needs to draw, that the name they drew isn't their own, and the person they drew still has room to be given gifts
                    if gifts_given < tempChristmasList[(Q[x]+1)*7-2] and tempChristmasList[(S[y]+1)*7-4] != tempChristmasList[(Q[x]+1)*7-4]: 
                        if tempChristmasList[(S[y]+1)*7-3] < tempChristmasList[(S[y]+1)*7-2]:
                            #print('tempChristmasList[Q[x]]',tempChristmasList[Q[x]],'tempChristmasList[Q[x]]',tempChristmasList[S[y]])
                            # iterate the veto list to make sure the current assignee ("drawn name") isn't on it
                            for m in range(len(tempChristmasList[(Q[x]+1)*7-5])):

                                if tempChristmasList[(S[y]+1)*7-4] == tempChristmasList[(Q[x]+1)*7-5][m]:
                                    veto = 1
                                    #print('---- stopping assignment of', tempChristmasList[(x+1)*7-5][m], 'to ', tempChristmasList[(x+1)*7-4], 'because of a veto ----')

                            if veto == 0:

                                ## append the new assignee to the person whose turn it is
                                # DEBUGGING print('assigning', tempChristmasList[(S[x][y]+1)*7-4], 'to', tempChristmasList[(x+1)*7-4] )
                                tempChristmasList[(Q[x]+1)*7-1].append(tempChristmasList[(S[y]+1)*7-4])                                                                                                                
                                tempChristmasList[(S[y]+1)*7-3] += 1 #add 1 to gift_given of the assignee
                                gifts_given += 1

                done = 1
                for t in Q:
                    if tempChristmasList[(S[t]+1)*7-2] != tempChristmasList[(S[t]+1)*7-3]: #if the gifts_received != desired_gifts_given, we're not done
                        done = 0
        
            if done == 1:
                print('\n')
                print('SOLUTION FOUND ON ITERATION', count, '!!')
                tempChristmasList = Update_Email_Body(tempChristmasList, name)
                return (tempChristmasList)
                break
            else:
                del tempChristmasList
                tempChristmasList = copy.deepcopy(christmasList)
                #print ('\n', 'No Result Found. Resetting for iteration:', count+1, '\n')
    
        if done == 1:
            break

        #randomly drop a desired gift from the topmost person, and try again
        topRounds, topRoundsPos = 0,0

        for p in Q:
            if tempChristmasList[(p+1)*7-2] > topRounds: #if this person is > than the current top giver
                topRounds = tempChristmasList[(p+1)*7-2] # the top given number is now them
                topRoundsPos = p #save the position of this giver
            elif tempChristmasList[(p+1)*7-2] == topRounds and random.random() < .5: # if two people's desired_gifts_given is equal, randomly pick one to drop
                topRoundsPos = p

        reducedCount += 1
        innerCount = 0
        christmasList[(topRoundsPos+1)*7-2] -= 1 #reduce desired gifts given from top giver
        del tempChristmasList
        tempChristmasList = copy.deepcopy(christmasList)
        print('\n')
        print(tempChristmasList[(topRoundsPos+1)*7-4], "'s gift_given has been reduced from", topRounds, 'to', tempChristmasList[(topRoundsPos+1)*7-2], '\nSTARTING ROUND', reducedCount, '!\n')

        christmasList = Update_Email_Body(christmasList)


def TurnAssigneesToVetos(christmasList):

    print('\n\nTURNING ROUND ONE ASSIGNEES INTO ROUND TWO VETOS \n\n')
    #print('before: ', christmasList)
    for x in range(int(len(christmasList)/7)):
        for y in range(len(christmasList[(x+1)*7-1])): #iterate as many times as there are assignees # this is the length of the asignee field
            christmasList[(x+1)*7-5].append(christmasList[(x+1)*7-1][y]) # append asignee at y to veto list

        # do it again but this time to remove clear out the asignees
        for z in range(len(christmasList[(x+1)*7-1])):
            christmasList[(x+1)*7-1].pop() # remove 

    #print('after: ', christmasList)
    return(christmasList)


def PrintPairings(christmasList):
    for p in range(int(len((christmasList))/7)):
        print(christmasList[(p+1)*7-4],': ', christmasList[(p+1)*7-1])
    print('\n\n')

def ClearVetos(christmasList, name):
    for i in range(int(len(christmasList)/7)):
        if christmasList[(i+1)*7-4] == name:
            christmasList[(i+1)*7-5].clear()


###########################
#### Code is Executed #####
###########################


# Round 1 Choices        -  christmasList Order is ['email body', email, [veto list], person, gifts_received, desired_gifts_given, [their generated asignees]]
christmasListOriginal = ['', 'email@gmail.com' ,['Santa'], 'Frosty', 0, 2, [], 
                         '', 'email@gmail.com' ,['Buddy', 'Frosty], 'Hans Gruber', 0, 0, [], 
                         '', 'email@gmail.com' ,['Hans Gruber', 'Santa'], 'Buddy', 0, 1, [], 
                         '', 'email@gmail.com' ,['Hans Gruber'], 'Santa', 0, 1, []]

## Generate Round 1 Pairings ##
round1List = Generate_Assignees(christmasListOriginal, "Christmas Eve")
print('\nROUND 1 PAIRINGS: \n')
PrintPairings(round1List)
Clear_Sheet(path)
Write_Pairings_to_Excel(round1List, path, "Christmas Eve")

# Round 2 Choices
christmasDayChoices = ['Frosty', 2, 'Hans Gruber', 1, 'Buddy', 0, 'Santa', 1]

## Generate Round 2 Pairings ##
for i in range(int(len((round1List))/7)):
    round1List[(i+1)*7-2] = christmasDayChoices[(i+1)*2-1] # overwrite with their new choices
    round1List[(i+1)*7-3] = 0 # reset gifts received to 0

ClearVetos(round1List, 'Buddy') #clear Buddy's veto list for round 2
round2List = (TurnAssigneesToVetos(round1List))

#print ('beginning round 2 with: ', round2List) # DEBUGGING
round2List = (Generate_Assignees(round2List, "Granville Christmas Day"))
print('\nRound 2 PAIRINGS: \n')
PrintPairings(round2List)
Write_Pairings_to_Excel(round2List, path, "Granville Christmas Day")
Write_Timestamp_Message_to_Excel(path)
round2List = Write_Timestamp_Message_to_Email_Body(round2List)
print(round2List)
Send_Email_Results(round2List)
